name: Build dependencies

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      image:
        required: false
        type: string
        default: ""
      xcode:
        required: false
        type: string
        default: "latest-stable"
      compiler:
        required: false
        type: string
        default: ""
      compiler_path:
        required: false
        type: string
        default: ""
      default:
        required: false
        type: boolean
        default: false

jobs:

  build:
    runs-on: "${{ inputs.os }}"

    outputs:
      target_arch: ${{ steps.lockfile_bookkeeping.outputs.TARGET_ARCH }}
      target_triplet: ${{ steps.lockfile_bookkeeping.outputs.TARGET_TRIPLET }}
      target_triplet_slug: ${{ steps.lockfile_bookkeeping.outputs.TARGET_TRIPLET_SLUG }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Spack
        uses: spack/setup-spack@v2

      - name: Apply spack patches
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          if [ -d spack_patches ]; then
            for f in spack_patches/*.patch; do
              git -C spack am -3 "$f"
            done
          fi


      - name: Remove packages to save disk
        if: startsWith(inputs.os, 'ubuntu')
        run: |
          df -h
          sudo apt-get update
          echo "Listing 25 largest packages"
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 25
          echo "Removing large packages"
          ./uninstall_packages.sh
          df -h

      - name: Setup Xcode version
        if: startsWith(inputs.os, 'macos')
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "${{ inputs.xcode }}"

      - name: Run spack build (container)
        if: "${{ inputs.image != '' }}"
        run: |
          mkdir build
          docker run \
            -v"$PWD:/src" \
            -v"$(spack location -r):/spack" \
            -v"$PWD/build:/build" \
            -v "$GITHUB_ENV:/github_env"\
            -e "SPACK_ROOT=/spack" \
            -e "COMPILER=${{ inputs.compiler }}" \
            -e "COMPILER_PATH=${{ inputs.compiler_path }}" \
            -e "GH_OCI_USER=${{ github.actor }}" \
            -e "GH_OCI_TOKEN=${{ secrets.GITHUB_TOKEN }}" \
            -e "GITHUB_ENV=/github_env" \
            -e "GITHUB_ACTIONS=${GITHUB_ACTIONS}" \
            -w /build \
            ${{ inputs.image }} \
            /src/spack_build.sh

      - name: Run spack build (host)
        if: "${{ inputs.image == '' }}"
        run: |
          export COMPILER=${{ inputs.compiler }}
          export SPACK_ROOT=$(spack location -r)
          export COMPILER_PATH="${{ inputs.compiler_path }}"
          export GH_OCI_USER="${{ github.actor }}"
          export GH_OCI_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          mkdir build
          pushd build
          ../spack_build.sh
          popd

      - name: Lockfile bookkeeping
        shell: bash
        if: always()
        id: lockfile_bookkeeping
        run: |
          cp build/spack.lock "spack_${TARGET_TRIPLET}.lock"
          if [[ "${{ inputs.default }}" == "true" ]]; then
            # this will be become the default combination for this architecture
            cp build/spack.lock "spack_${TARGET_ARCH}.lock"
          fi
          echo "TARGET_TRIPLET=${TARGET_TRIPLET}" >> "$GITHUB_OUTPUT"
          echo "TARGET_ARCH=${TARGET_ARCH}" >> "$GITHUB_OUTPUT"
          echo "TARGET_TRIPLET_SLUG=${TARGET_TRIPLET}" | sed 's/@/-/g' >> "$GITHUB_OUTPUT"

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v5


      - name: Derive base image
        shell: bash
        if: "!cancelled()"
        run: |
          if [[ "${{ inputs.image }}" != "" ]]; then
            echo BASE_IMAGE="${{ inputs.image }}" >> "$GITHUB_ENV"
          elif [[ "${{ inputs.os }}" == "ubuntu-22.04" ]]; then
            echo BASE_IMAGE="ubuntu:22.04" >> "$GITHUB_ENV"
          elif [[ "${{ inputs.os }}" == "ubuntu-24.04" ]]; then
            echo BASE_IMAGE="ubuntu:24.04" >> "$GITHUB_ENV"
          else
            echo BASE_IMAGE="ubuntu:24.04" >> "$GITHUB_ENV"
          fi

      - name: Print base image
        shell: bash
        if: "!cancelled()"
        run: |
          echo "BASE IMAGE: ${BASE_IMAGE}"

      - name: Create Dockerfile from spack lockfile
        if: "inputs.image != '' && !cancelled()"
        run: |
          uv run lockfile_to_docker.py \
            "spack_${TARGET_TRIPLET}.lock" \
            --base-image ${BASE_IMAGE} \
            -o Dockerfile.${TARGET_TRIPLET}

      - name: Upload lock files and Dockerfiles
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: spack_${{ env.TARGET_TRIPLET }}-locks
          path: |
            spack_*.lock
            Dockerfile.*
          if-no-files-found: error

      - name: Add lock files and Dockerfiles to release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            Dockerfile.*
            spack_*.lock

      - name: Push spack cache (container)
        if: "inputs.image != '' && !cancelled()"
        run: |
          docker run \
            -v"$PWD:/src" \
            -v"$(spack location -r):/spack" \
            -v"$PWD/build:/build" \
            -e "SPACK_ROOT=/spack" \
            -e "GITHUB_ACTIONS=${GITHUB_ACTIONS}" \
            -e "GH_OCI_USER=${{ github.actor }}" \
            -e "GH_OCI_TOKEN=${{ secrets.GITHUB_TOKEN }}" \
            -e "BASE_IMAGE=${BASE_IMAGE}" \
            -w /build \
            ${{ inputs.image }} \
            /src/spack_push.sh

      - name: Push spack cache (host)
        if: "inputs.image == '' && !cancelled()"
        env:
          GH_OCI_USER: "${{ github.actor }}"
          GH_OCI_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          export SPACK_ROOT=$(spack location -r)
          pushd build
          ../spack_push.sh
          popd

  build_docker:
    if: "inputs.image != ''"
    runs-on: "${{ inputs.os }}"
    needs: [build]

    env:
      TARGET_ARCH: ${{ needs.build.outputs.target_arch }}
      TARGET_TRIPLET: ${{ needs.build.outputs.target_triplet }}
      TARGET_TRIPLET_SLUG: ${{ needs.build.outputs.target_triplet_slug }}

    steps:
      - uses: actions/checkout@v4

      - name: Remove packages to save disk
        if: startsWith(inputs.os, 'ubuntu')
        run: |
          df -h
          sudo apt-get update
          echo "Listing 25 largest packages"
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 25
          echo "Removing large packages"
          ./uninstall_packages.sh
          df -h

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
        with:
          name: spack_${{ env.TARGET_TRIPLET }}-locks

      - run: |
          cp Dockerfile.* Dockerfile

      - uses: docker/login-action@v3
        if: "inputs.image != '' && !cancelled()"
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        if: "inputs.image != '' && !cancelled()"
        uses: docker/metadata-action@v5
        id: meta
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/${{ github.repository_owner  }}/spack-container
          # generate Docker tags based on the following events/attributesk
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}_${{ env.TARGET_TRIPLET_SLUG }}
            type=semver,pattern={{major}}.{{minor}}_${{ env.TARGET_TRIPLET_SLUG }}
            type=semver,pattern={{major}}_${{ env.TARGET_TRIPLET_SLUG }}

      - name: Build and push
        if: "inputs.image != '' && !cancelled()"
        uses: docker/build-push-action@v5
        with:
          # Push only on tags
          push: ${{ startsWith(github.ref, 'refs/tags/') }}
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
